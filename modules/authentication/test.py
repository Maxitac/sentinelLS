from nacl.public import PrivateKey, PublicKey, Box
from nacl.utils import random
import os

# Generate random key pair for the agent
agent_private_key = PrivateKey.generate()
agent_public_key = agent_private_key.public_key
print("Agent Public Key:", agent_public_key.encode().hex())

# Implement mechanism for sharing agent PUBKEY with controller
controller_agent_public_key = agent_public_key

# Secret key generated by controller
# should be based on something unique to each specific agent, not random
shared_secret_key = os.urandom(32)
print("Shared Secret Key:", shared_secret_key.hex())

# Controller shares secret key with the agent
controller_private_key = PrivateKey.generate()
controller_public_key = controller_private_key.public_key
ctrl_box = Box(controller_private_key, controller_agent_public_key)
ciphertext = ctrl_box.encrypt(shared_secret_key)
print("Ciphertext sent to agent:", ciphertext.ciphertext.hex())

# Implement mechanism for sharing controller public key with agent
# Or have public key embedded into all agents.
# Implement a means to share the ciphertext to the agents.
agent_controller_public_key = controller_public_key
agent_box = Box(agent_private_key, agent_controller_public_key)
decrypted_secret_key = agent_box.decrypt(ciphertext)
print("Decrypted Secret Key by Agent:", decrypted_secret_key.hex())

#Verify results
assert decrypted_secret_key == shared_secret_key, "Decrypted key does not match the original!"
print(" Key exchange successful and verified.")